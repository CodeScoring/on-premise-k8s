apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: ipcs-tasks-high-priority

spec:
  serviceName: ipcs-tasks-high-priority
  replicas: 1
  selector:
    matchLabels:
      app: ipcs-tasks-high-priority

  template:
    metadata:
      labels:
        app: ipcs-tasks-high-priority
    spec:

      volumes:
        - name: analysis-root
          persistentVolumeClaim:
            claimName: analysis-root-pvc

      automountServiceAccountToken: false

      containers:
        - name: ipcs-tasks-high-priority
          image: registry-one.codescoring.ru/ipcs-huey
          command: ["python"]
          args: [ "manage.py", "djangohuey", "--queue", "high-priority", "--no-periodic" ]
          securityContext:
            runAsUser: 1050
            runAsGroup: 1050
          envFrom:
            - configMapRef:
                name: ipcs-env
            - secretRef:
                name: ipcs-secrets

          volumeMounts:
            - name: analysis-root
              mountPath: /analysis-root
          imagePullPolicy: Always

      imagePullSecrets:
        - name: cs-registry
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: ipcs-tasks-high-priority-scheduler

spec:
  serviceName: ipcs-tasks-high-priority-scheduler
  replicas: 1
  selector:
    matchLabels:
      app: ipcs-tasks-high-priority-scheduler

  template:
    metadata:
      labels:
        app: ipcs-tasks-high-priority-scheduler
    spec:

      volumes:
        - name: analysis-root
          persistentVolumeClaim:
            claimName: analysis-root-pvc

      automountServiceAccountToken: false

      containers:
        - name: ipcs-tasks-high-priority-scheduler
          image: registry-one.codescoring.ru/ipcs-huey
          command: ["python"]
          args: [ "manage.py", "djangohuey", "--queue", "high-priority", "--workers", "0" ]
          securityContext:
            runAsUser: 1050
            runAsGroup: 1050
          envFrom:
            - configMapRef:
                name: ipcs-env
            - secretRef:
                name: ipcs-secrets

          volumeMounts:
            - name: analysis-root
              mountPath: /analysis-root
          imagePullPolicy: Always

      imagePullSecrets:
        - name: cs-registry
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: ipcs-huey

spec:
  serviceName: ipcs-huey
  replicas: 1
  selector:
    matchLabels:
      app: ipcs-huey

  template:
    metadata:
      labels:
        app: ipcs-huey
    spec:

      volumes:
        - name: analysis-root
          persistentVolumeClaim:
            claimName: analysis-root-pvc

      automountServiceAccountToken: false

      containers:
        - name: ipcs-huey
          image: registry-one.codescoring.ru/ipcs-huey
          command: ["python"]
          args: [ "manage.py", "djangohuey", "--queue", "ipcs", "--no-periodic" ]
          securityContext:
            runAsUser: 1050
            runAsGroup: 1050
          envFrom:
            - configMapRef:
                name: ipcs-env
            - secretRef:
                name: ipcs-secrets

          volumeMounts:
            - name: analysis-root
              mountPath: /analysis-root
          imagePullPolicy: Always

      imagePullSecrets:
        - name: cs-registry
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: ipcs-huey-scheduler

spec:
  serviceName: ipcs-huey-scheduler
  replicas: 1
  selector:
    matchLabels:
      app: ipcs-huey-scheduler

  template:
    metadata:
      labels:
        app: ipcs-huey-scheduler
    spec:

      volumes:
        - name: analysis-root
          persistentVolumeClaim:
            claimName: analysis-root-pvc

      automountServiceAccountToken: false

      containers:
        - name: ipcs-huey-scheduler
          image: registry-one.codescoring.ru/ipcs-huey
          command: ["python"]
          args: [ "manage.py", "djangohuey", "--queue", "ipcs", "--workers", "0" ]
          securityContext:
            runAsUser: 1050
            runAsGroup: 1050
          envFrom:
            - configMapRef:
                name: ipcs-env
            - secretRef:
                name: ipcs-secrets

          volumeMounts:
            - name: analysis-root
              mountPath: /analysis-root
          imagePullPolicy: Always

      imagePullSecrets:
        - name: cs-registry
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: ipcs-backend

spec:
  serviceName: ipcs-backend
  replicas: 1
  selector:
    matchLabels:
      app: ipcs-backend

  template:
    metadata:
      labels:
        app: ipcs-backend
    spec:

      volumes:
        - name: django-static
          persistentVolumeClaim:
            claimName: django-static-pvc
        - name: analysis-root
          persistentVolumeClaim:
            claimName: analysis-root-pvc

      automountServiceAccountToken: false

      containers:
        - name: ipcs-backend
          image: registry-one.codescoring.ru/ipcs-backend
          command: ["gunicorn"]
          args: [ "ipcs.wsgi", "-c", "gunicorn_conf.py" ]
          securityContext:
            runAsUser: 1050
            runAsGroup: 1050
          ports:
            - containerPort: 18000

          envFrom:
            - configMapRef:
                name: ipcs-env
            - secretRef:
                name: ipcs-secrets

          volumeMounts:
            - name: django-static
              mountPath: /ipcs-backend/files/static
            - name: analysis-root
              mountPath: /analysis-root
          imagePullPolicy: Always

      imagePullSecrets:
        - name: cs-registry

---
apiVersion: v1
kind: Service
metadata:
  name: backend
spec:
  selector:
     app: ipcs-backend
  ports:
    - protocol: TCP
      port: 18000
      targetPort: 18000
